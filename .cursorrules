# fetchr.sh Cursor Rules

## Project Overview
This is a Go-based HTTP proxy and request capture tool with a web dashboard frontend.

## General Rules
- Always use `--legacy-peer-deps` when running npm commands
- Follow conventional commits (feat:, fix:, refactor:, perf:, security:)
- Use the Makefile for all development tasks
- Run `make check` before committing
- Write tests for all new features

## Go Backend Rules

### Code Style
- Follow Go standard formatting (gofmt)
- Use clear and descriptive variable names
- Add comments for complex logic and public APIs
- Follow Go best practices and idioms
- Use structured logging with context
- Handle errors properly with meaningful messages

### File Structure
- Keep related code together in appropriate packages
- Follow Go project layout conventions:
  - `cmd/` for main applications
  - `internal/` for private application code
  - `pkg/` for library code that can be imported
  - `test/` for additional test files
- Place tests next to the code: if file is `pkg/proxy/server.go`, test should be `pkg/proxy/server_test.go`

### Testing
- Write unit tests for all new code with `//go:build unit` tags
- Include integration tests with appropriate build tags
- Use table-driven tests for multiple test cases
- Mock external dependencies
- Maintain high test coverage
- Run tests with `make test` and `make e2e`

### Dependencies
- Use Go modules with pinned versions
- Keep external dependencies minimal
- Document dependency requirements in go.mod
- Run `make deps` to manage dependencies

## Dashboard Frontend Rules

### Technology Stack
- Use modern JavaScript/TypeScript framework (React, Next.js, or Vue)
- Use Tailwind CSS for styling
- Use a component library for consistency
- Always run npm commands with `--legacy-peer-deps`

### Code Style
- Use TypeScript for type safety
- Follow ESLint and Prettier configurations
- Use functional components with hooks
- Implement proper error boundaries
- Use proper state management (Context API, Zustand, or Redux)

### File Structure
- Place dashboard code in `dashboard/` directory
- Use consistent naming: PascalCase for components, camelCase for files
- Group related components in folders
- Separate API calls into service files
- Place tests next to components: `Component.tsx` and `Component.test.tsx`

### API Integration
- Create typed interfaces for all API responses
- Use proper error handling for API calls
- Implement loading states and error states
- Use environment variables for API endpoints
- Implement proper authentication/authorization

## Development Workflow

### Setup
1. Run `make install` to install Go development tools
2. Run `make deps` to install Go dependencies  
3. Navigate to `dashboard/` and run `npm install --legacy-peer-deps`
4. Run `make dev` to start both backend and frontend in development mode

### Before Committing
1. Run `make check` to run all Go checks
2. Run `npm run lint --legacy-peer-deps` in dashboard directory
3. Run `npm run test --legacy-peer-deps` in dashboard directory
4. Ensure all tests pass and code is formatted

### Commands to Use
- `make help` - See all available commands
- `make build` - Build Go binary
- `make test` - Run Go unit tests
- `make e2e` - Run end-to-end tests
- `make lint` - Run Go linting
- `make check` - Run all Go checks
- `make dev` - Start development servers
- `make build-dashboard` - Build dashboard for production
- `make serve-dev` - Start backend in development mode

## Feature Development

### Adding New Features
1. Create feature branch from main
2. Write tests first (TDD)
3. Implement Go backend changes
4. Update dashboard if UI changes needed
5. Update documentation
6. Run `make check` and dashboard tests
7. Create PR with all changes

### API Changes
- Update OpenAPI/Swagger specifications
- Update TypeScript interfaces in dashboard
- Add proper validation and error handling
- Update integration tests
- Document breaking changes

## Error Handling
- Use meaningful error messages with context
- Implement proper HTTP status codes
- Log errors appropriately with structured logging
- Handle edge cases gracefully
- Display user-friendly errors in dashboard

## Security
- Validate all inputs on both backend and frontend
- Use HTTPS in production
- Implement proper CORS policies
- Sanitize user inputs
- Follow OWASP guidelines
- Regular security audits

## Performance
- Profile critical paths in Go code
- Optimize database queries
- Implement proper caching strategies
- Use lazy loading in dashboard
- Monitor bundle sizes for frontend
- Implement proper pagination for large datasets

## Configuration
- Use environment variables for configuration
- Support configuration files
- Validate all configuration on startup
- Document all configuration options
- Use sensible defaults

## Documentation
- Update README.md for new features
- Keep API documentation current
- Add inline code documentation
- Include examples for complex features
- Update ROADMAP.md as features are completed

## Deployment
- Support containerization (Docker)
- Include production build scripts
- Document deployment procedures
- Support multiple environments
- Include health checks and monitoring

## Monitoring and Logging
- Use structured logging throughout
- Include relevant context in logs
- Implement metrics endpoints
- Add health check endpoints
- Monitor resource usage
- Set up appropriate alerts 