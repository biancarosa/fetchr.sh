# git-cliff configuration file for fetchr.sh
# See: https://git-cliff.org/docs/configuration/

[changelog]
# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        {%- if commit.scope -%}
            - **{{ commit.scope }}**: {{ commit.message | upper_first }}
        {%- else -%}
            - {{ commit.message | upper_first }}
        {%- endif -%}
        {%- if commit.links %} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.links[0] }})){% endif %}
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/platformlabs-co/fetchr.sh" }, # replace repository URL
]

# GitHub integration (comment out if you don't want to use GitHub API)
# [remote.github]
# owner = "biancarosa"  # Replace with your actual GitHub username if different
# repo = "fetchr.sh"
# token = "${GITHUB_TOKEN}"  # Use environment variable

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers with links (customize for your issue tracker)
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/platformlabs-co/username/fetchr.sh/issues/${2}))"},
  # Replace @ mentions with links
  { pattern = '@([a-zA-Z0-9_-]+)', replace = "[@${1}](https://github.com/${1})"},
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
  { message = "^refactor", group = "<!-- 2 -->♻️ Refactor" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
  { message = "^security", group = "<!-- 8 -->🔒 Security" },
  { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = ""
# regex for ignoring tags
ignore_tags = "v.*-(alpha|beta).*"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42

[bump]
features_always_bump_minor = true
breaking_always_bump_major = true 