name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: next_version
        run: |
          CURRENT_VERSION=${CURRENT_VERSION#v}
          IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
          MAJOR="${version_parts[0]}"
          MINOR="${version_parts[1]}"
          PATCH="${version_parts[2]}"
          
          case "${{ inputs.version_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Generate changelog from commits
          echo "## Changes in ${{ steps.next_version.outputs.next_version }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Group commits by type
          echo "### Added" >> CHANGELOG.md
          git log --pretty=format:"- %s" $PREV_TAG..HEAD | grep -i "^- feat" | sed 's/^- feat:/-/' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          echo "### Changed" >> CHANGELOG.md
          git log --pretty=format:"- %s" $PREV_TAG..HEAD | grep -i "^- refactor\|^- perf" | sed 's/^- refactor:/-/' | sed 's/^- perf:/-/' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          echo "### Fixed" >> CHANGELOG.md
          git log --pretty=format:"- %s" $PREV_TAG..HEAD | grep -i "^- fix" | sed 's/^- fix:/-/' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          echo "### Security" >> CHANGELOG.md
          git log --pretty=format:"- %s" $PREV_TAG..HEAD | grep -i "^- security" | sed 's/^- security:/-/' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Add previous changelog entries
          if [ -f CHANGELOG.md.old ]; then
            echo "## Previous Releases" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat CHANGELOG.md.old >> CHANGELOG.md
          fi

      - name: Build
        run: go build -v -o fetchr ./cmd/fetchr

      - name: Create Release Tag
        run: |
          git tag -a "${{ steps.next_version.outputs.next_version }}" -m "Release ${{ steps.next_version.outputs.next_version }}"
          git push origin "${{ steps.next_version.outputs.next_version }}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ steps.next_version.outputs.next_version }}"
          name: "Release ${{ steps.next_version.outputs.next_version }}"
          draft: false
          prerelease: false
          files: |
            fetchr
          body_path: CHANGELOG.md

      - name: Publish to GitHub Packages
        run: |
          echo "Publishing to GitHub Packages..."
          # Create a temporary go.mod for the package
          mkdir -p /tmp/fetchr
          cp -r . /tmp/fetchr/
          cd /tmp/fetchr
          go mod init github.com/${{ github.repository }}
          go mod tidy
          
          # Publish the package
          GOPROXY=direct go publish ./... 